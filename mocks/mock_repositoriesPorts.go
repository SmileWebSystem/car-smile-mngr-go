// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repositoriesPorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	models "car-smile-mngr-go/internal/core/models"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSoapRepository is a mock of SoapRepository interface.
type MockSoapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSoapRepositoryMockRecorder
}

// MockSoapRepositoryMockRecorder is the mock recorder for MockSoapRepository.
type MockSoapRepositoryMockRecorder struct {
	mock *MockSoapRepository
}

// NewMockSoapRepository creates a new mock instance.
func NewMockSoapRepository(ctrl *gomock.Controller) *MockSoapRepository {
	mock := &MockSoapRepository{ctrl: ctrl}
	mock.recorder = &MockSoapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSoapRepository) EXPECT() *MockSoapRepositoryMockRecorder {
	return m.recorder
}

// GetSoapInfoCar mocks base method.
func (m *MockSoapRepository) GetSoapInfoCar(licensePlate string) (*models.SoapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoapInfoCar", licensePlate)
	ret0, _ := ret[0].(*models.SoapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoapInfoCar indicates an expected call of GetSoapInfoCar.
func (mr *MockSoapRepositoryMockRecorder) GetSoapInfoCar(licensePlate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoapInfoCar", reflect.TypeOf((*MockSoapRepository)(nil).GetSoapInfoCar), licensePlate)
}

// MockHTTPClientRepository is a mock of HTTPClientRepository interface.
type MockHTTPClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientRepositoryMockRecorder
}

// MockHTTPClientRepositoryMockRecorder is the mock recorder for MockHTTPClientRepository.
type MockHTTPClientRepositoryMockRecorder struct {
	mock *MockHTTPClientRepository
}

// NewMockHTTPClientRepository creates a new mock instance.
func NewMockHTTPClientRepository(ctrl *gomock.Controller) *MockHTTPClientRepository {
	mock := &MockHTTPClientRepository{ctrl: ctrl}
	mock.recorder = &MockHTTPClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientRepository) EXPECT() *MockHTTPClientRepositoryMockRecorder {
	return m.recorder
}

// DoClient mocks base method.
func (m *MockHTTPClientRepository) DoClient(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoClient", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoClient indicates an expected call of DoClient.
func (mr *MockHTTPClientRepositoryMockRecorder) DoClient(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoClient", reflect.TypeOf((*MockHTTPClientRepository)(nil).DoClient), req)
}
